package main;

import main.breakers.CipherBreakerOutput;
import main.breakers.monoalphabetic.MonoAlphabeticCipherBreaker;
import main.utils.Constants;

import static main.utils.TextUtilities.*;

public class Main {
    public static void main(String[] args) {
        Constants.initialize();

        String cipherText = """                
                OADDPFRDFNODVPPJNOOHTQQLRMPPMDSMHMXFQRXQEAAKGGENHTORCRGUNFALAELQCDPPXFCDTPWXFQTDASBMYNQQDIKUTQHJBECARACLIKCVASIGMFCPMWWOVQCNKPASBNXFTBECNPCEDXGLDOGQNNFCWSVLDRBPSQIKNVHBPFMSANNQCBNQAPPSKMPHCXGLHABQMRQAWKSQDDNQRNFESMRGFFNRFQDVQKPRWGKHIFUPUCARKJSHXFPOKFUACCKGAQOGSFSDFSQDOGKADHFAANCOAAHPQAXRNHSAQMEQMUCFUQDURNQADDFXCIMCOKPNRKANFNAKCHACKBSCDHINFKKRIFCNCUKISRSFRPKAHHIFXCIFOKPNMQAWKSQCPODEQMUCFUQDQIUSFHPNHNFPCPDMHQTDQDASBMIFOKPNAKDAESFAONFDDDQCPODUPCQPOTMDQAKUDQNQCWASMQCESFRANQDEQASGFCGODQLDDDLKCAKUNFUOKATDPEIHXAPDHLCMSXEFQDQAMSACEDCNBKBKPPLKNCECETGBEDIUQIFLGBCSWMKDFPPPQCQCQDUPRVIXQACWPAVNHSAQMHQEMHCUUNQDCQUPPTDPDFPFDDEOKAJRIFCKNHADHNQBASFSFEMDCUTDDCCMXKADGIUYPKXQACWHQAPPKCSFSFSFOOKMPAVANCDFCNPAKDDEOKKUPBNPDAJDCLXAEQBASFTFMDBNPDAQAPPSFYDAMJMLEMDCUTFNIOGOSFHXKWKLQCFAMPHACNPAKVDAFQAAIHKKWKSCKIMESFSMICCCPTCBQHOOVMCHUICUQLQDXBNWXPLRJHNBPHIMSLLLIHTOUDCBTIIFQLWDOSDWIFRVHAHKTGKFKDPHHOOMHDFSMDGLNFSFLWPKEMDTDDGSAVQQCBPPRCCSGHCXCFPMSRBPDOFSFRGIFUACASICXUTASBHSPKKPQLCVTUFUUSLHBMAVAKDFQDRBPTDHWOAHCUADQMGEDPNKOHXSDXHIFFOSRFDGKTIHKKDHQGQNNFKTPLQAKTSHOGKFNXDFSFUMPHQCERQIOSDVSHLECLNGIHRHYCGIASDPCQCFMNPBDRFDWXONHVIRNGRDPPKQOGHMYODAXVWWABWXKDDMATIHATOTDUDLDPMULCAWXPA
                """;
        //AttackManager am = new AttackManager(cipherText);
        byte[] cipherTextBytes = formatAndConvertToBytes(cipherText);


        long startTime = System.currentTimeMillis();

        //am.guessCipherType();
        //am.performPeriodTesting(16);
        //am.tryMonoalphabeticBreakers();
        //am.tryTranspositionBreakers();

        CipherBreakerOutput<byte[]> output = MonoAlphabeticCipherBreaker.evolutionaryHillClimbingAttackMF(cipherTextBytes, 400, 400);

        System.out.println("Plaintext: " + convertToString(output.plainText, Constants.alphabet));

        long endTime = System.currentTimeMillis();
        System.out.println("Execution time: " + (endTime - startTime) + "ms");
    }
}
