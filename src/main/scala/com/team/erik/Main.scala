package com.team.erik

import scala.io.Source
import scala.util.control.Breaks._
import scala.collection.parallel.CollectionConverters._
import java.nio.file.{Files, Paths, StandardOpenOption}

import com.core._
import com.core.alphabets._
import com.core.keys.KeyFactory
import com.core.languagedata.DataTable
import com.core.evolutionaryalgorithms._
import com.core.ciphers._
import com.core.extensions._
import com.core.analysers._
import com.core.cipherdata._
import com.core.extensions.BiMapExtensions._
import com.core.collections._
import com.core.extensions.StringExtensions.highlight
import com.core.progressbar.ProgressBar
import com.core.keys.KeyFactory.random
import scala.annotation.alpha
import com.core.extensions.IterableExtensions.pretty
import com.core.cipherbreakers._

object Main {
    def loadData(): (CipherDataBlock[Char], CipherFormatResult) = {
        val path = Paths.get(".\\resources\\text\\Orwell1984.txt")
        val text = Source.fromFile(path.toFile, "UTF-8").take(1000).mkString
        CipherDataBlock.formatAndCreate(text, UppercaseLettersNoJ)
    }

    def saveText(text: String, path: String): Unit = {
        Files.write(Paths.get(path), text.getBytes(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)
    }

    def job() = {
        val ciphertext = """DMYERA LPAMRE OSTNBI IELEEV ATHTRP CINELA RBETAM LYARAE HDYAEV IWRTET ONTYUO NCOCRE NNIGHT MISATT AERNID AAMLTI ETLEBM RARASS TEDORW EITTIH ESLTET TRAALL TBUIOH YPEOWU LILUDN SERTNA FDIIDN SMYEFL TATHME CERYFO OTWSRT GONWLI DLEWMO WENHAO USSRME HETATT SHIMTA RTEIUS ERGNYT HOUAEV RALEDA EYBEIN ONFREM BDAOTU ROUUEN EXPCET UDGETS SMISAW ERNWOH RARIEV ADLSWT KEETOO AURSOT SNIHEM ONTNHT TESEMA ISHPAP FCIISC IHESLA TITLCE AOYBUO OTHWHS FEAFRO DDETEH UJOREN NYADSI PUSETC ATHTHS IEMGTH VHAEEB AENSOT WWAAWY LHIEAI NMICIL DNETDO LEASRT GONLWY HITTAH ATMTET HRTEOC TUNESS SHAEPX SRESDE ETHEUQ LALYTS NROGIV TEWHTA SWEHUO FLDISR DTADER TSSHRE SEAOSN RFOMSI ASWREN ISVSTI VGIETN SHEESN IITVTI FYOTEH TMATRE ESDSRC EIBDEB WLOIHT KINSEH PISRBO LABYIR TGHMSI ASWREN SHADTE MERIEN HDTATT MHEYTS IEROSU LBULTE SWAMNA AUFCUT DREBTY IHEMEP ARILRA CMSOPM YANWIH ACHSOY NUKOIW WSONDE JBYUIL KUSASI SERPNO RSOOTF IHENID AAPVLI NIOTEH LBULTE SWADSE NIGEAD NSAOEV YLTIET OMTBDE TISRBI EUTDTA ETHEHX IIBTOI INWTTH EHENRG EAVDEL ETTRDS OENTNI HGTEAD OTEFHT XEEHBI IITOON NPEIGN ETHDTA AEWSNE YCRPET HDTEYC EPHRNI ITHSAC BSEENI RGAAHT SERIPM CLEASE SARHFI STIUPP EOSKIA RSEFLE HTTATT SHIWSA TRAHRE ECLVRE OTHUHG SITEME NSAOSB RCUEAW OYTMRA TKEHSI MCOPNA HYTAPT HERASP AISMRA FKOTEH NMASHC AARCET ERHFNA ECISIH EMSLTF CHELVE EERSMT IANNVE YERROO UMBTEH FISUDN GINTEH VPAIIL AONNID STIIPM TORATN ATHTEW NDOOHT GINTOO EFFNHD TIMHTA SDICVO YERMGI HHTAEV OCLSDE ETHMTA RTEADN AIWSNI ICLNDE STOHPI ETHSMO HEWAOT RVEETN SHUISA CTIMSI ASWREN CBAKOT RHEHMO NEINWE RYOKOH VWEETR CHEONU STESAH ESPRUS EADDEM ATHTYM IINTAI MLIPER ISSOSN RWEERP UEJDCI LIAADN ETHRDE SOESEE OMTBSE EOMTIH MNGOER TTOHSI FAFARI SMISAW ERNFUO TNDHBE LULENT TEXTAO ASTCOK EFSAEL RDCAET ASMREK IDWTTH LHEOOG TOFHME UANFCA RTUETR YHEHDA EBENHS PIPETD RHEERF COMHCI OAGTEH ACRTSE NCOTIA DNERFI SLEADN MAMUIN OTINED LVEOEP YDBTEH MCOPNA OYFRHT LECIAM ITENHT UESBOC INTNNE HTTEOC AMPNIY OSHPFE TULHTA ETHBIR STIHOG RVENEM ANTNTD EHEIWC LOUDOB BTHENI RTEETS IEDNUP HRCAIS TNGHME ATHTOD EESXLP NAIHRE ARKIES IRSNET SRETNI ETHEHX IIBTOI TNIWLI CLATSA AAMREK LTPAEC RFOHSI WNEWAE NPOSUB LTASAO PNOPRO NTUIYT CTOURR AYFVUO IRWTTH PHERNI GCEIEV INHSNI UFLECN IEWTTH GHEOEV MRNETN ATHTIM TGHIPM VROEIH HSCACN FEOWNI NNIGCA TONRCA ITMSWS NAREWS REASHT TATHCE TRAEHS NADOBT NEETMA RPEEWD HITTEH MCOPNA EYSASL RWEENI CTATIW ETNSES YDBTEH OPHTGO PRAHBS UROGTH MBYISS RWANAE INDTSI TNOCEL HAROOW HRWYNO FEOTEH LBULTE HSSOLU ADHVEE ASCPDE ETHMTI ESEMPS SOSILB HETAET HITEAR VRIAML UANFCA RTUEOR CRARMI AINLAG MNGAHY EAVSOT NLETEH NCOTNE OTSFNO REOMRO FEOTEH ACRTSE MSOEOH AWMNGA GINTRO EESATL MHEBTU ALEVNI HGTIOS SNEMLA LLCUTE HOTERI TACIIV ETISNI ITHSEW YMAHVA EEBELN KUCYFI ETHSIH EPMNHT AADPEP EARDOT DBEEIF ECINOT RNARVI AALTHT XEEHBI IITOIN OTWUDL VHAEEB DENIFF UICLTT SOETBA SLIHHT TATHTE FHETAH CDOCRU DREITN UHESEW GMIHTT NHEHVA EEBEAN UCCSDE COFAER SLESEN ISSNUO ARHNLD GINOTF CHEOSN NIGMNE TTIHNI TKIWUO BLDENI ROUBSE NTITRE TESSOT AEXMNI HETEOC AMPNSY ACRTSE FBEOER ETHYEL EAVTEH ISHPHW HICARR EIVDNI VLIEPR LOOERA ELIRHT WISEKE RFOTNU EATLTY CHEURR TENDCO OKWREK SRSSRT EIKHSA LDEAEY NDULAO NDIGOS SWEHUO HLDAEV MTIEOT MCOMSI OSINFA LULCEH OCKFHT AECROG FBEOER LITADN FSIAYN ITHNIG MSAISS ETHNEW LWILEB LABEOT SASUER KMRASI TERHTA ETHISS AUERSO EEBFRO HETERC EATSER HACEUD ASIMWA EAROTF SHEESN IITVTI SIEITN SHIMTA RTEWTI HHTEID LSPAOY HFTEOK NHIORO IATTHS REATHT NEIDAI VPAIIL IONSEV DRYERA BTOOHT ETHPIR ENCADN RHEMJA TESYHT UEQENE WITOLU EDBMSO MTEBRA SRASNI FGIIST IPRNIC LPASOP ONSREH KRRASI SERHUO FLDELE ATHTEW EARNTO FAFODR GINHMI EEVRAY ISSSAT ENCIHN OISWEN ENDAOV SURWTI YHMVRE EYBSWT HISEBS BABAEG"""
        val formatted = CipherDataBlock.formatAndCreate(ciphertext)
        val cipherdata = formatted._1        
        val broken = TranspositionCipherBreaker.break(cipherdata)
        val reformatted = formatted._2.revertFormat(broken.outData).mkString;
        println(broken.textData)
        saveText(broken.toXml, ".\\submissions\\Challenge3B.xml")
    }

    def main(args: Array[String]): Unit = {
        job()
    }
}
